{"version":3,"sources":["intersection-observer.js"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","window","IntersectionObserverEntry","Object","defineProperty","get","this","intersectionRatio","document","startDoc","doc","frame","getFrameElement","ownerDocument","registry","crossOriginUpdater","crossOriginRect","IntersectionObserver","THROTTLE_TIMEOUT","POLL_INTERVAL","USE_MUTATION_OBSERVER","_setupCrossOriginUpdater","boundingClientRect","intersectionRect","convertFromParentRect","top","bottom","left","right","width","height","forEach","observer","_checkForIntersections","_resetCrossOriginUpdater","observe","target","_observationTargets","some","item","element","nodeType","Error","_registerInstance","push","entry","_monitorIntersections","unobserve","filter","_unmonitorIntersections","length","_unregisterInstance","disconnect","_unmonitorAllIntersections","takeRecords","records","_queuedEntries","slice","_initThresholds","opt_threshold","threshold","Array","isArray","sort","t","i","a","isNaN","_parseRootMargin","opt_rootMargin","margins","split","map","margin","parts","exec","value","parseFloat","unit","win","defaultView","_monitoringDocuments","indexOf","callback","monitoringInterval","domObserver","setInterval","addEvent","MutationObserver","attributes","childList","characterData","subtree","_monitoringUnsubscribes","clearInterval","removeEvent","rootDoc","root","index","itemDoc","unsubscribe","splice","unsubscribes","rootIsInDom","_rootIsInDom","rootRect","_getRootRect","targetRect","getBoundingClientRect","rootContainsTarget","_rootContainsTarget","oldEntry","_computeTargetAndRootIntersection","rootBounds","newEntry","time","performance","now","_hasCrossedThreshold","isIntersecting","_callback","getComputedStyle","display","rect1","rect2","parent","getParentNode","atRoot","parentRect","parentComputedStyle","frameRect","frameIntersect","body","documentElement","overflow","Math","max","min","isDoc","html","clientWidth","clientHeight","_expandRectByRootMargin","rect","_rootMarginValues","newRect","oldRatio","newRatio","thresholds","containsDeep","frameElement","e","ensureDOMRect","targetArea","intersectionArea","Number","toFixed","opt_options","fn","timeout","timer","options","bind","setTimeout","rootMargin","join","node","event","opt_useCapture","addEventListener","attachEvent","removeEventListener","detatchEvent","el","err","y","x","parentBoundingRect","parentIntersectionRect","child","parentNode","assignedSlot","host"],"mappings":"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","file":"../intersection-observer.min.js","sourcesContent":["/**\r\n * Copyright 2016 Google Inc. All Rights Reserved.\r\n *\r\n * Licensed under the W3C SOFTWARE AND DOCUMENT NOTICE AND LICENSE.\r\n *\r\n *  https://www.w3.org/Consortium/Legal/2015/copyright-software-and-document\r\n *\r\n */\r\n(function() {\r\n'use strict';\r\n\r\n// Exit early if we're not running in a browser.\r\nif (typeof window !== 'object') {\r\n  return;\r\n}\r\n\r\n// Exit early if all IntersectionObserver and IntersectionObserverEntry\r\n// features are natively supported.\r\nif ('IntersectionObserver' in window &&\r\n    'IntersectionObserverEntry' in window &&\r\n    'intersectionRatio' in window.IntersectionObserverEntry.prototype) {\r\n\r\n  // Minimal polyfill for Edge 15's lack of `isIntersecting`\r\n  // See: https://github.com/w3c/IntersectionObserver/issues/211\r\n  if (!('isIntersecting' in window.IntersectionObserverEntry.prototype)) {\r\n    Object.defineProperty(window.IntersectionObserverEntry.prototype,\r\n      'isIntersecting', {\r\n      get: function () {\r\n        return this.intersectionRatio > 0;\r\n      }\r\n    });\r\n  }\r\n  return;\r\n}\r\n\r\n/**\r\n * Returns the embedding frame element, if any.\r\n * @param {!Document} doc\r\n * @return {!Element}\r\n */\r\nfunction getFrameElement(doc) {\r\n  try {\r\n    return doc.defaultView && doc.defaultView.frameElement || null;\r\n  } catch (e) {\r\n    // Ignore the error.\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * A local reference to the root document.\r\n */\r\nvar document = (function(startDoc) {\r\n  var doc = startDoc;\r\n  var frame = getFrameElement(doc);\r\n  while (frame) {\r\n    doc = frame.ownerDocument;\r\n    frame = getFrameElement(doc);\r\n  }\r\n  return doc;\r\n})(window.document);\r\n\r\n/**\r\n * An IntersectionObserver registry. This registry exists to hold a strong\r\n * reference to IntersectionObserver instances currently observing a target\r\n * element. Without this registry, instances without another reference may be\r\n * garbage collected.\r\n */\r\nvar registry = [];\r\n\r\n/**\r\n * The signal updater for cross-origin intersection. When not null, it means\r\n * that the polyfill is configured to work in a cross-origin mode.\r\n * @type {function(DOMRect|ClientRect, DOMRect|ClientRect)}\r\n */\r\nvar crossOriginUpdater = null;\r\n\r\n/**\r\n * The current cross-origin intersection. Only used in the cross-origin mode.\r\n * @type {DOMRect|ClientRect}\r\n */\r\nvar crossOriginRect = null;\r\n\r\n\r\n/**\r\n * Creates the global IntersectionObserverEntry constructor.\r\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-entry\r\n * @param {Object} entry A dictionary of instance properties.\r\n * @constructor\r\n */\r\nfunction IntersectionObserverEntry(entry) {\r\n  this.time = entry.time;\r\n  this.target = entry.target;\r\n  this.rootBounds = ensureDOMRect(entry.rootBounds);\r\n  this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);\r\n  this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());\r\n  this.isIntersecting = !!entry.intersectionRect;\r\n\r\n  // Calculates the intersection ratio.\r\n  var targetRect = this.boundingClientRect;\r\n  var targetArea = targetRect.width * targetRect.height;\r\n  var intersectionRect = this.intersectionRect;\r\n  var intersectionArea = intersectionRect.width * intersectionRect.height;\r\n\r\n  // Sets intersection ratio.\r\n  if (targetArea) {\r\n    // Round the intersection ratio to avoid floating point math issues:\r\n    // https://github.com/w3c/IntersectionObserver/issues/324\r\n    this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));\r\n  } else {\r\n    // If area is zero and is intersecting, sets to 1, otherwise to 0\r\n    this.intersectionRatio = this.isIntersecting ? 1 : 0;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Creates the global IntersectionObserver constructor.\r\n * https://w3c.github.io/IntersectionObserver/#intersection-observer-interface\r\n * @param {Function} callback The function to be invoked after intersection\r\n *     changes have queued. The function is not invoked if the queue has\r\n *     been emptied by calling the `takeRecords` method.\r\n * @param {Object=} opt_options Optional configuration options.\r\n * @constructor\r\n */\r\nfunction IntersectionObserver(callback, opt_options) {\r\n\r\n  var options = opt_options || {};\r\n\r\n  if (typeof callback != 'function') {\r\n    throw new Error('callback must be a function');\r\n  }\r\n\r\n  if (\r\n    options.root &&\r\n    options.root.nodeType != 1 &&\r\n    options.root.nodeType != 9\r\n  ) {\r\n    throw new Error('root must be a Document or Element');\r\n  }\r\n\r\n  // Binds and throttles `this._checkForIntersections`.\r\n  this._checkForIntersections = throttle(\r\n      this._checkForIntersections.bind(this), this.THROTTLE_TIMEOUT);\r\n\r\n  // Private properties.\r\n  this._callback = callback;\r\n  this._observationTargets = [];\r\n  this._queuedEntries = [];\r\n  this._rootMarginValues = this._parseRootMargin(options.rootMargin);\r\n\r\n  // Public properties.\r\n  this.thresholds = this._initThresholds(options.threshold);\r\n  this.root = options.root || null;\r\n  this.rootMargin = this._rootMarginValues.map(function(margin) {\r\n    return margin.value + margin.unit;\r\n  }).join(' ');\r\n\r\n  /** @private @const {!Array<!Document>} */\r\n  this._monitoringDocuments = [];\r\n  /** @private @const {!Array<function()>} */\r\n  this._monitoringUnsubscribes = [];\r\n}\r\n\r\n\r\n/**\r\n * The minimum interval within which the document will be checked for\r\n * intersection changes.\r\n */\r\nIntersectionObserver.prototype.THROTTLE_TIMEOUT = 100;\r\n\r\n\r\n/**\r\n * The frequency in which the polyfill polls for intersection changes.\r\n * this can be updated on a per instance basis and must be set prior to\r\n * calling `observe` on the first target.\r\n */\r\nIntersectionObserver.prototype.POLL_INTERVAL = null;\r\n\r\n/**\r\n * Use a mutation observer on the root element\r\n * to detect intersection changes.\r\n */\r\nIntersectionObserver.prototype.USE_MUTATION_OBSERVER = true;\r\n\r\n\r\n/**\r\n * Sets up the polyfill in the cross-origin mode. The result is the\r\n * updater function that accepts two arguments: `boundingClientRect` and\r\n * `intersectionRect` - just as these fields would be available to the\r\n * parent via `IntersectionObserverEntry`. This function should be called\r\n * each time the iframe receives intersection information from the parent\r\n * window, e.g. via messaging.\r\n * @return {function(DOMRect|ClientRect, DOMRect|ClientRect)}\r\n */\r\nIntersectionObserver._setupCrossOriginUpdater = function() {\r\n  if (!crossOriginUpdater) {\r\n    /**\r\n     * @param {DOMRect|ClientRect} boundingClientRect\r\n     * @param {DOMRect|ClientRect} intersectionRect\r\n     */\r\n    crossOriginUpdater = function(boundingClientRect, intersectionRect) {\r\n      if (!boundingClientRect || !intersectionRect) {\r\n        crossOriginRect = getEmptyRect();\r\n      } else {\r\n        crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);\r\n      }\r\n      registry.forEach(function(observer) {\r\n        observer._checkForIntersections();\r\n      });\r\n    };\r\n  }\r\n  return crossOriginUpdater;\r\n};\r\n\r\n\r\n/**\r\n * Resets the cross-origin mode.\r\n */\r\nIntersectionObserver._resetCrossOriginUpdater = function() {\r\n  crossOriginUpdater = null;\r\n  crossOriginRect = null;\r\n};\r\n\r\n\r\n/**\r\n * Starts observing a target element for intersection changes based on\r\n * the thresholds values.\r\n * @param {Element} target The DOM element to observe.\r\n */\r\nIntersectionObserver.prototype.observe = function(target) {\r\n  var isTargetAlreadyObserved = this._observationTargets.some(function(item) {\r\n    return item.element == target;\r\n  });\r\n\r\n  if (isTargetAlreadyObserved) {\r\n    return;\r\n  }\r\n\r\n  if (!(target && target.nodeType == 1)) {\r\n    throw new Error('target must be an Element');\r\n  }\r\n\r\n  this._registerInstance();\r\n  this._observationTargets.push({element: target, entry: null});\r\n  this._monitorIntersections(target.ownerDocument);\r\n  this._checkForIntersections();\r\n};\r\n\r\n\r\n/**\r\n * Stops observing a target element for intersection changes.\r\n * @param {Element} target The DOM element to observe.\r\n */\r\nIntersectionObserver.prototype.unobserve = function(target) {\r\n  this._observationTargets =\r\n      this._observationTargets.filter(function(item) {\r\n        return item.element != target;\r\n      });\r\n  this._unmonitorIntersections(target.ownerDocument);\r\n  if (this._observationTargets.length == 0) {\r\n    this._unregisterInstance();\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Stops observing all target elements for intersection changes.\r\n */\r\nIntersectionObserver.prototype.disconnect = function() {\r\n  this._observationTargets = [];\r\n  this._unmonitorAllIntersections();\r\n  this._unregisterInstance();\r\n};\r\n\r\n\r\n/**\r\n * Returns any queue entries that have not yet been reported to the\r\n * callback and clears the queue. This can be used in conjunction with the\r\n * callback to obtain the absolute most up-to-date intersection information.\r\n * @return {Array} The currently queued entries.\r\n */\r\nIntersectionObserver.prototype.takeRecords = function() {\r\n  var records = this._queuedEntries.slice();\r\n  this._queuedEntries = [];\r\n  return records;\r\n};\r\n\r\n\r\n/**\r\n * Accepts the threshold value from the user configuration object and\r\n * returns a sorted array of unique threshold values. If a value is not\r\n * between 0 and 1 and error is thrown.\r\n * @private\r\n * @param {Array|number=} opt_threshold An optional threshold value or\r\n *     a list of threshold values, defaulting to [0].\r\n * @return {Array} A sorted list of unique and valid threshold values.\r\n */\r\nIntersectionObserver.prototype._initThresholds = function(opt_threshold) {\r\n  var threshold = opt_threshold || [0];\r\n  if (!Array.isArray(threshold)) threshold = [threshold];\r\n\r\n  return threshold.sort().filter(function(t, i, a) {\r\n    if (typeof t != 'number' || isNaN(t) || t < 0 || t > 1) {\r\n      throw new Error('threshold must be a number between 0 and 1 inclusively');\r\n    }\r\n    return t !== a[i - 1];\r\n  });\r\n};\r\n\r\n\r\n/**\r\n * Accepts the rootMargin value from the user configuration object\r\n * and returns an array of the four margin values as an object containing\r\n * the value and unit properties. If any of the values are not properly\r\n * formatted or use a unit other than px or %, and error is thrown.\r\n * @private\r\n * @param {string=} opt_rootMargin An optional rootMargin value,\r\n *     defaulting to '0px'.\r\n * @return {Array<Object>} An array of margin objects with the keys\r\n *     value and unit.\r\n */\r\nIntersectionObserver.prototype._parseRootMargin = function(opt_rootMargin) {\r\n  var marginString = opt_rootMargin || '0px';\r\n  var margins = marginString.split(/\\s+/).map(function(margin) {\r\n    var parts = /^(-?\\d*\\.?\\d+)(px|%)$/.exec(margin);\r\n    if (!parts) {\r\n      throw new Error('rootMargin must be specified in pixels or percent');\r\n    }\r\n    return {value: parseFloat(parts[1]), unit: parts[2]};\r\n  });\r\n\r\n  // Handles shorthand.\r\n  margins[1] = margins[1] || margins[0];\r\n  margins[2] = margins[2] || margins[0];\r\n  margins[3] = margins[3] || margins[1];\r\n\r\n  return margins;\r\n};\r\n\r\n\r\n/**\r\n * Starts polling for intersection changes if the polling is not already\r\n * happening, and if the page's visibility state is visible.\r\n * @param {!Document} doc\r\n * @private\r\n */\r\nIntersectionObserver.prototype._monitorIntersections = function(doc) {\r\n  var win = doc.defaultView;\r\n  if (!win) {\r\n    // Already destroyed.\r\n    return;\r\n  }\r\n  if (this._monitoringDocuments.indexOf(doc) != -1) {\r\n    // Already monitoring.\r\n    return;\r\n  }\r\n\r\n  // Private state for monitoring.\r\n  var callback = this._checkForIntersections;\r\n  var monitoringInterval = null;\r\n  var domObserver = null;\r\n\r\n  // If a poll interval is set, use polling instead of listening to\r\n  // resize and scroll events or DOM mutations.\r\n  if (this.POLL_INTERVAL) {\r\n    monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);\r\n  } else {\r\n    addEvent(win, 'resize', callback, true);\r\n    addEvent(doc, 'scroll', callback, true);\r\n    if (this.USE_MUTATION_OBSERVER && 'MutationObserver' in win) {\r\n      domObserver = new win.MutationObserver(callback);\r\n      domObserver.observe(doc, {\r\n        attributes: true,\r\n        childList: true,\r\n        characterData: true,\r\n        subtree: true\r\n      });\r\n    }\r\n  }\r\n\r\n  this._monitoringDocuments.push(doc);\r\n  this._monitoringUnsubscribes.push(function() {\r\n    // Get the window object again. When a friendly iframe is destroyed, it\r\n    // will be null.\r\n    var win = doc.defaultView;\r\n\r\n    if (win) {\r\n      if (monitoringInterval) {\r\n        win.clearInterval(monitoringInterval);\r\n      }\r\n      removeEvent(win, 'resize', callback, true);\r\n    }\r\n\r\n    removeEvent(doc, 'scroll', callback, true);\r\n    if (domObserver) {\r\n      domObserver.disconnect();\r\n    }\r\n  });\r\n\r\n  // Also monitor the parent.\r\n  var rootDoc =\r\n    (this.root && (this.root.ownerDocument || this.root)) || document;\r\n  if (doc != rootDoc) {\r\n    var frame = getFrameElement(doc);\r\n    if (frame) {\r\n      this._monitorIntersections(frame.ownerDocument);\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Stops polling for intersection changes.\r\n * @param {!Document} doc\r\n * @private\r\n */\r\nIntersectionObserver.prototype._unmonitorIntersections = function(doc) {\r\n  var index = this._monitoringDocuments.indexOf(doc);\r\n  if (index == -1) {\r\n    return;\r\n  }\r\n\r\n  var rootDoc =\r\n    (this.root && (this.root.ownerDocument || this.root)) || document;\r\n\r\n  // Check if any dependent targets are still remaining.\r\n  var hasDependentTargets =\r\n      this._observationTargets.some(function(item) {\r\n        var itemDoc = item.element.ownerDocument;\r\n        // Target is in this context.\r\n        if (itemDoc == doc) {\r\n          return true;\r\n        }\r\n        // Target is nested in this context.\r\n        while (itemDoc && itemDoc != rootDoc) {\r\n          var frame = getFrameElement(itemDoc);\r\n          itemDoc = frame && frame.ownerDocument;\r\n          if (itemDoc == doc) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      });\r\n  if (hasDependentTargets) {\r\n    return;\r\n  }\r\n\r\n  // Unsubscribe.\r\n  var unsubscribe = this._monitoringUnsubscribes[index];\r\n  this._monitoringDocuments.splice(index, 1);\r\n  this._monitoringUnsubscribes.splice(index, 1);\r\n  unsubscribe();\r\n\r\n  // Also unmonitor the parent.\r\n  if (doc != rootDoc) {\r\n    var frame = getFrameElement(doc);\r\n    if (frame) {\r\n      this._unmonitorIntersections(frame.ownerDocument);\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Stops polling for intersection changes.\r\n * @param {!Document} doc\r\n * @private\r\n */\r\nIntersectionObserver.prototype._unmonitorAllIntersections = function() {\r\n  var unsubscribes = this._monitoringUnsubscribes.slice(0);\r\n  this._monitoringDocuments.length = 0;\r\n  this._monitoringUnsubscribes.length = 0;\r\n  for (var i = 0; i < unsubscribes.length; i++) {\r\n    unsubscribes[i]();\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Scans each observation target for intersection changes and adds them\r\n * to the internal entries queue. If new entries are found, it\r\n * schedules the callback to be invoked.\r\n * @private\r\n */\r\nIntersectionObserver.prototype._checkForIntersections = function() {\r\n  if (!this.root && crossOriginUpdater && !crossOriginRect) {\r\n    // Cross origin monitoring, but no initial data available yet.\r\n    return;\r\n  }\r\n\r\n  var rootIsInDom = this._rootIsInDom();\r\n  var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();\r\n\r\n  this._observationTargets.forEach(function(item) {\r\n    var target = item.element;\r\n    var targetRect = getBoundingClientRect(target);\r\n    var rootContainsTarget = this._rootContainsTarget(target);\r\n    var oldEntry = item.entry;\r\n    var intersectionRect = rootIsInDom && rootContainsTarget &&\r\n        this._computeTargetAndRootIntersection(target, targetRect, rootRect);\r\n\r\n    var rootBounds = null;\r\n    if (!this._rootContainsTarget(target)) {\r\n      rootBounds = getEmptyRect();\r\n    } else if (!crossOriginUpdater || this.root) {\r\n      rootBounds = rootRect;\r\n    }\r\n\r\n    var newEntry = item.entry = new IntersectionObserverEntry({\r\n      time: now(),\r\n      target: target,\r\n      boundingClientRect: targetRect,\r\n      rootBounds: rootBounds,\r\n      intersectionRect: intersectionRect\r\n    });\r\n\r\n    if (!oldEntry) {\r\n      this._queuedEntries.push(newEntry);\r\n    } else if (rootIsInDom && rootContainsTarget) {\r\n      // If the new entry intersection ratio has crossed any of the\r\n      // thresholds, add a new entry.\r\n      if (this._hasCrossedThreshold(oldEntry, newEntry)) {\r\n        this._queuedEntries.push(newEntry);\r\n      }\r\n    } else {\r\n      // If the root is not in the DOM or target is not contained within\r\n      // root but the previous entry for this target had an intersection,\r\n      // add a new record indicating removal.\r\n      if (oldEntry && oldEntry.isIntersecting) {\r\n        this._queuedEntries.push(newEntry);\r\n      }\r\n    }\r\n  }, this);\r\n\r\n  if (this._queuedEntries.length) {\r\n    this._callback(this.takeRecords(), this);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Accepts a target and root rect computes the intersection between then\r\n * following the algorithm in the spec.\r\n * TODO(philipwalton): at this time clip-path is not considered.\r\n * https://w3c.github.io/IntersectionObserver/#calculate-intersection-rect-algo\r\n * @param {Element} target The target DOM element\r\n * @param {Object} targetRect The bounding rect of the target.\r\n * @param {Object} rootRect The bounding rect of the root after being\r\n *     expanded by the rootMargin value.\r\n * @return {?Object} The final intersection rect object or undefined if no\r\n *     intersection is found.\r\n * @private\r\n */\r\nIntersectionObserver.prototype._computeTargetAndRootIntersection =\r\n    function(target, targetRect, rootRect) {\r\n  // If the element isn't displayed, an intersection can't happen.\r\n  if (window.getComputedStyle(target).display == 'none') return;\r\n\r\n  var intersectionRect = targetRect;\r\n  var parent = getParentNode(target);\r\n  var atRoot = false;\r\n\r\n  while (!atRoot && parent) {\r\n    var parentRect = null;\r\n    var parentComputedStyle = parent.nodeType == 1 ?\r\n        window.getComputedStyle(parent) : {};\r\n\r\n    // If the parent isn't displayed, an intersection can't happen.\r\n    if (parentComputedStyle.display == 'none') return null;\r\n\r\n    if (parent == this.root || parent.nodeType == /* DOCUMENT */ 9) {\r\n      atRoot = true;\r\n      if (parent == this.root || parent == document) {\r\n        if (crossOriginUpdater && !this.root) {\r\n          if (!crossOriginRect ||\r\n              crossOriginRect.width == 0 && crossOriginRect.height == 0) {\r\n            // A 0-size cross-origin intersection means no-intersection.\r\n            parent = null;\r\n            parentRect = null;\r\n            intersectionRect = null;\r\n          } else {\r\n            parentRect = crossOriginRect;\r\n          }\r\n        } else {\r\n          parentRect = rootRect;\r\n        }\r\n      } else {\r\n        // Check if there's a frame that can be navigated to.\r\n        var frame = getParentNode(parent);\r\n        var frameRect = frame && getBoundingClientRect(frame);\r\n        var frameIntersect =\r\n            frame &&\r\n            this._computeTargetAndRootIntersection(frame, frameRect, rootRect);\r\n        if (frameRect && frameIntersect) {\r\n          parent = frame;\r\n          parentRect = convertFromParentRect(frameRect, frameIntersect);\r\n        } else {\r\n          parent = null;\r\n          intersectionRect = null;\r\n        }\r\n      }\r\n    } else {\r\n      // If the element has a non-visible overflow, and it's not the <body>\r\n      // or <html> element, update the intersection rect.\r\n      // Note: <body> and <html> cannot be clipped to a rect that's not also\r\n      // the document rect, so no need to compute a new intersection.\r\n      var doc = parent.ownerDocument;\r\n      if (parent != doc.body &&\r\n          parent != doc.documentElement &&\r\n          parentComputedStyle.overflow != 'visible') {\r\n        parentRect = getBoundingClientRect(parent);\r\n      }\r\n    }\r\n\r\n    // If either of the above conditionals set a new parentRect,\r\n    // calculate new intersection data.\r\n    if (parentRect) {\r\n      intersectionRect = computeRectIntersection(parentRect, intersectionRect);\r\n    }\r\n    if (!intersectionRect) break;\r\n    parent = parent && getParentNode(parent);\r\n  }\r\n  return intersectionRect;\r\n};\r\n\r\n\r\n/**\r\n * Returns the root rect after being expanded by the rootMargin value.\r\n * @return {ClientRect} The expanded root rect.\r\n * @private\r\n */\r\nIntersectionObserver.prototype._getRootRect = function() {\r\n  var rootRect;\r\n  if (this.root && !isDoc(this.root)) {\r\n    rootRect = getBoundingClientRect(this.root);\r\n  } else {\r\n    // Use <html>/<body> instead of window since scroll bars affect size.\r\n    var doc = isDoc(this.root) ? this.root : document;\r\n    var html = doc.documentElement;\r\n    var body = doc.body;\r\n    rootRect = {\r\n      top: 0,\r\n      left: 0,\r\n      right: html.clientWidth || body.clientWidth,\r\n      width: html.clientWidth || body.clientWidth,\r\n      bottom: html.clientHeight || body.clientHeight,\r\n      height: html.clientHeight || body.clientHeight\r\n    };\r\n  }\r\n  return this._expandRectByRootMargin(rootRect);\r\n};\r\n\r\n\r\n/**\r\n * Accepts a rect and expands it by the rootMargin value.\r\n * @param {DOMRect|ClientRect} rect The rect object to expand.\r\n * @return {ClientRect} The expanded rect.\r\n * @private\r\n */\r\nIntersectionObserver.prototype._expandRectByRootMargin = function(rect) {\r\n  var margins = this._rootMarginValues.map(function(margin, i) {\r\n    return margin.unit == 'px' ? margin.value :\r\n        margin.value * (i % 2 ? rect.width : rect.height) / 100;\r\n  });\r\n  var newRect = {\r\n    top: rect.top - margins[0],\r\n    right: rect.right + margins[1],\r\n    bottom: rect.bottom + margins[2],\r\n    left: rect.left - margins[3]\r\n  };\r\n  newRect.width = newRect.right - newRect.left;\r\n  newRect.height = newRect.bottom - newRect.top;\r\n\r\n  return newRect;\r\n};\r\n\r\n\r\n/**\r\n * Accepts an old and new entry and returns true if at least one of the\r\n * threshold values has been crossed.\r\n * @param {?IntersectionObserverEntry} oldEntry The previous entry for a\r\n *    particular target element or null if no previous entry exists.\r\n * @param {IntersectionObserverEntry} newEntry The current entry for a\r\n *    particular target element.\r\n * @return {boolean} Returns true if a any threshold has been crossed.\r\n * @private\r\n */\r\nIntersectionObserver.prototype._hasCrossedThreshold =\r\n    function(oldEntry, newEntry) {\r\n\r\n  // To make comparing easier, an entry that has a ratio of 0\r\n  // but does not actually intersect is given a value of -1\r\n  var oldRatio = oldEntry && oldEntry.isIntersecting ?\r\n      oldEntry.intersectionRatio || 0 : -1;\r\n  var newRatio = newEntry.isIntersecting ?\r\n      newEntry.intersectionRatio || 0 : -1;\r\n\r\n  // Ignore unchanged ratios\r\n  if (oldRatio === newRatio) return;\r\n\r\n  for (var i = 0; i < this.thresholds.length; i++) {\r\n    var threshold = this.thresholds[i];\r\n\r\n    // Return true if an entry matches a threshold or if the new ratio\r\n    // and the old ratio are on the opposite sides of a threshold.\r\n    if (threshold == oldRatio || threshold == newRatio ||\r\n        threshold < oldRatio !== threshold < newRatio) {\r\n      return true;\r\n    }\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Returns whether or not the root element is an element and is in the DOM.\r\n * @return {boolean} True if the root element is an element and is in the DOM.\r\n * @private\r\n */\r\nIntersectionObserver.prototype._rootIsInDom = function() {\r\n  return !this.root || containsDeep(document, this.root);\r\n};\r\n\r\n\r\n/**\r\n * Returns whether or not the target element is a child of root.\r\n * @param {Element} target The target element to check.\r\n * @return {boolean} True if the target element is a child of root.\r\n * @private\r\n */\r\nIntersectionObserver.prototype._rootContainsTarget = function(target) {\r\n  var rootDoc =\r\n    (this.root && (this.root.ownerDocument || this.root)) || document;\r\n  return (\r\n    containsDeep(rootDoc, target) &&\r\n    (!this.root || rootDoc == target.ownerDocument)\r\n  );\r\n};\r\n\r\n\r\n/**\r\n * Adds the instance to the global IntersectionObserver registry if it isn't\r\n * already present.\r\n * @private\r\n */\r\nIntersectionObserver.prototype._registerInstance = function() {\r\n  if (registry.indexOf(this) < 0) {\r\n    registry.push(this);\r\n  }\r\n};\r\n\r\n\r\n/**\r\n * Removes the instance from the global IntersectionObserver registry.\r\n * @private\r\n */\r\nIntersectionObserver.prototype._unregisterInstance = function() {\r\n  var index = registry.indexOf(this);\r\n  if (index != -1) registry.splice(index, 1);\r\n};\r\n\r\n\r\n/**\r\n * Returns the result of the performance.now() method or null in browsers\r\n * that don't support the API.\r\n * @return {number} The elapsed time since the page was requested.\r\n */\r\nfunction now() {\r\n  return window.performance && performance.now && performance.now();\r\n}\r\n\r\n\r\n/**\r\n * Throttles a function and delays its execution, so it's only called at most\r\n * once within a given time period.\r\n * @param {Function} fn The function to throttle.\r\n * @param {number} timeout The amount of time that must pass before the\r\n *     function can be called again.\r\n * @return {Function} The throttled function.\r\n */\r\nfunction throttle(fn, timeout) {\r\n  var timer = null;\r\n  return function () {\r\n    if (!timer) {\r\n      timer = setTimeout(function() {\r\n        fn();\r\n        timer = null;\r\n      }, timeout);\r\n    }\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Adds an event handler to a DOM node ensuring cross-browser compatibility.\r\n * @param {Node} node The DOM node to add the event handler to.\r\n * @param {string} event The event name.\r\n * @param {Function} fn The event handler to add.\r\n * @param {boolean} opt_useCapture Optionally adds the even to the capture\r\n *     phase. Note: this only works in modern browsers.\r\n */\r\nfunction addEvent(node, event, fn, opt_useCapture) {\r\n  if (typeof node.addEventListener == 'function') {\r\n    node.addEventListener(event, fn, opt_useCapture || false);\r\n  }\r\n  else if (typeof node.attachEvent == 'function') {\r\n    node.attachEvent('on' + event, fn);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Removes a previously added event handler from a DOM node.\r\n * @param {Node} node The DOM node to remove the event handler from.\r\n * @param {string} event The event name.\r\n * @param {Function} fn The event handler to remove.\r\n * @param {boolean} opt_useCapture If the event handler was added with this\r\n *     flag set to true, it should be set to true here in order to remove it.\r\n */\r\nfunction removeEvent(node, event, fn, opt_useCapture) {\r\n  if (typeof node.removeEventListener == 'function') {\r\n    node.removeEventListener(event, fn, opt_useCapture || false);\r\n  }\r\n  else if (typeof node.detatchEvent == 'function') {\r\n    node.detatchEvent('on' + event, fn);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Returns the intersection between two rect objects.\r\n * @param {Object} rect1 The first rect.\r\n * @param {Object} rect2 The second rect.\r\n * @return {?Object|?ClientRect} The intersection rect or undefined if no\r\n *     intersection is found.\r\n */\r\nfunction computeRectIntersection(rect1, rect2) {\r\n  var top = Math.max(rect1.top, rect2.top);\r\n  var bottom = Math.min(rect1.bottom, rect2.bottom);\r\n  var left = Math.max(rect1.left, rect2.left);\r\n  var right = Math.min(rect1.right, rect2.right);\r\n  var width = right - left;\r\n  var height = bottom - top;\r\n\r\n  return (width >= 0 && height >= 0) && {\r\n    top: top,\r\n    bottom: bottom,\r\n    left: left,\r\n    right: right,\r\n    width: width,\r\n    height: height\r\n  } || null;\r\n}\r\n\r\n\r\n/**\r\n * Shims the native getBoundingClientRect for compatibility with older IE.\r\n * @param {Element} el The element whose bounding rect to get.\r\n * @return {DOMRect|ClientRect} The (possibly shimmed) rect of the element.\r\n */\r\nfunction getBoundingClientRect(el) {\r\n  var rect;\r\n\r\n  try {\r\n    rect = el.getBoundingClientRect();\r\n  } catch (err) {\r\n    // Ignore Windows 7 IE11 \"Unspecified error\"\r\n    // https://github.com/w3c/IntersectionObserver/pull/205\r\n  }\r\n\r\n  if (!rect) return getEmptyRect();\r\n\r\n  // Older IE\r\n  if (!(rect.width && rect.height)) {\r\n    rect = {\r\n      top: rect.top,\r\n      right: rect.right,\r\n      bottom: rect.bottom,\r\n      left: rect.left,\r\n      width: rect.right - rect.left,\r\n      height: rect.bottom - rect.top\r\n    };\r\n  }\r\n  return rect;\r\n}\r\n\r\n\r\n/**\r\n * Returns an empty rect object. An empty rect is returned when an element\r\n * is not in the DOM.\r\n * @return {ClientRect} The empty rect.\r\n */\r\nfunction getEmptyRect() {\r\n  return {\r\n    top: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    right: 0,\r\n    width: 0,\r\n    height: 0\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Ensure that the result has all of the necessary fields of the DOMRect.\r\n * Specifically this ensures that `x` and `y` fields are set.\r\n *\r\n * @param {?DOMRect|?ClientRect} rect\r\n * @return {?DOMRect}\r\n */\r\nfunction ensureDOMRect(rect) {\r\n  // A `DOMRect` object has `x` and `y` fields.\r\n  if (!rect || 'x' in rect) {\r\n    return rect;\r\n  }\r\n  // A IE's `ClientRect` type does not have `x` and `y`. The same is the case\r\n  // for internally calculated Rect objects. For the purposes of\r\n  // `IntersectionObserver`, it's sufficient to simply mirror `left` and `top`\r\n  // for these fields.\r\n  return {\r\n    top: rect.top,\r\n    y: rect.top,\r\n    bottom: rect.bottom,\r\n    left: rect.left,\r\n    x: rect.left,\r\n    right: rect.right,\r\n    width: rect.width,\r\n    height: rect.height\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Inverts the intersection and bounding rect from the parent (frame) BCR to\r\n * the local BCR space.\r\n * @param {DOMRect|ClientRect} parentBoundingRect The parent's bound client rect.\r\n * @param {DOMRect|ClientRect} parentIntersectionRect The parent's own intersection rect.\r\n * @return {ClientRect} The local root bounding rect for the parent's children.\r\n */\r\nfunction convertFromParentRect(parentBoundingRect, parentIntersectionRect) {\r\n  var top = parentIntersectionRect.top - parentBoundingRect.top;\r\n  var left = parentIntersectionRect.left - parentBoundingRect.left;\r\n  return {\r\n    top: top,\r\n    left: left,\r\n    height: parentIntersectionRect.height,\r\n    width: parentIntersectionRect.width,\r\n    bottom: top + parentIntersectionRect.height,\r\n    right: left + parentIntersectionRect.width\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * Checks to see if a parent element contains a child element (including inside\r\n * shadow DOM).\r\n * @param {Node} parent The parent element.\r\n * @param {Node} child The child element.\r\n * @return {boolean} True if the parent node contains the child node.\r\n */\r\nfunction containsDeep(parent, child) {\r\n  var node = child;\r\n  while (node) {\r\n    if (node == parent) return true;\r\n\r\n    node = getParentNode(node);\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\n/**\r\n * Gets the parent node of an element or its host element if the parent node\r\n * is a shadow root.\r\n * @param {Node} node The node whose parent to get.\r\n * @return {Node|null} The parent node or null if no parent exists.\r\n */\r\nfunction getParentNode(node) {\r\n  var parent = node.parentNode;\r\n\r\n  if (node.nodeType == /* DOCUMENT */ 9 && node != document) {\r\n    // If this node is a document node, look for the embedding frame.\r\n    return getFrameElement(node);\r\n  }\r\n\r\n  // If the parent has element that is assigned through shadow root slot\r\n  if (parent && parent.assignedSlot) {\r\n    parent = parent.assignedSlot.parentNode\r\n  }\r\n\r\n  if (parent && parent.nodeType == 11 && parent.host) {\r\n    // If the parent is a shadow root, return the host element.\r\n    return parent.host;\r\n  }\r\n\r\n  return parent;\r\n}\r\n\r\n/**\r\n * Returns true if `node` is a Document.\r\n * @param {!Node} node\r\n * @returns {boolean}\r\n */\r\nfunction isDoc(node) {\r\n  return node && node.nodeType === 9;\r\n}\r\n\r\n\r\n// Exposes the constructors globally.\r\nwindow.IntersectionObserver = IntersectionObserver;\r\nwindow.IntersectionObserverEntry = IntersectionObserverEntry;\r\n\r\n}());\r\n"]}