// centre un block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Ajoute le clearfix
@mixin clearfix() {
	content: "";
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Le width de la colonne avec la marge
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}


/// Retourne un media query avec la largeur donnée
/// 
/// @param {String} $width [76.8em]
/// @param {String} $minMax [min]
@mixin media-screen($width: 76.8em, $minMax: max){
	@media only screen and (#{$minMax}-width: $width) {
		@content;
	}
}


/// Permet d’appliquer un mixin au root autant que sous un autre sélecteur
/// require SASS 3.4
@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

// Permet de styler les placeholder. Peut être 
@mixin placeholder {
  @include optional-at-root('::-webkit-input-placeholder') {
    @content;
  }

  @include optional-at-root(':-moz-placeholder') {
    @content;
  }

  @include optional-at-root('::-moz-placeholder') {
    @content;
  }

  @include optional-at-root(':-ms-input-placeholder') {
    @content;
  }
}

/// Fait en sorte que le texte ait une grosseur fluide avec la largeur de l'écran.
/// Fonctionne seulement avec la même unité (px, em)
///
///
@mixin fluid-typo($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);


      font-size: $min-font-size;

      @media screen and (min-width: $min-vw) {
        font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }

}

/// Retire l'unité (px, em, rem, etc.) d'une valeur.
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}